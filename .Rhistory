-log(dpois(0:7, lambda =1) * gamma(1 + 0:7)) # == 1
Ni <- rpois(50, lambda = 4); table(factor(Ni, 0:max(Ni)))
1 - ppois(10*(15:25), lambda = 100) #becomes 0 (cancellation)
ppois(10*(15:25), lambda = 100, lower.tail = FALSE)
par(mfrow = c(2,1))
x<- seq(-0.01, 5,0.01)
plot(x, ppois(x,1), type="s", ylab ="F(x)", main = "Poisson(1) CDF")
plot(x, pbinom(x,100, 0.01), type="s", ylab = "F(x)", main = "Binom(100, 0.01) CDF")
exit
quit
quit()
swirl()
load(swirl)
swirl
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = blue)
boxplot(ppm, col = 'blue')
abline(h=12)
hist(ppm, col='green')
rug(ppm)
low
high
hist(ppm, col='green' breaks=100)
hist(ppm, col='green' breaks='100')
hist(ppm, col='green', breaks=100)
rug(ppm)
hist(ppm, col='green')
abline(v=12, lwd=2)
abline(v=median(ppm), col=magenta, lwd=4)
abline(v=median(ppm), col="magenta"", lwd=4)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = 'wheat', main ="Number of Counties in Each Region")
boxplot(pm25~regin, data=pollution, col='red')
boxplot(pm25~region, data=pollution, col='red')
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region = "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col='green')
hist(subset(pollution, region=="west"), col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
with(pollution, plot(latitude, pm25))
abline(12, lwd=2, lty=2)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar = c(54,2,1))
par(mfrow=c(1,2), mar = c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west#latitude, west$pm25, main = "West")
plot(west4latitude, west$pm25, main = "West")
plot(west$latitude, west$pm25, main = "West")
plot(west$latitude, west$pm25, main = "East")
plot(east$latitude, east$pm25, main = "East")
exit
quit
quit
exit()
quit()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
nlme
weight
Diet
BodyWeight
str(BodyWeight)
table(BodyWeight$Diet)
head(BodyWeight)
library(datasets)
data(airquality)
qplot(wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(qplot)
library(ggplot2)
qplot(wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
library(ggplot2movies)
data(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
1/13
0
3/13
2/51
.64
.64
mypdf
integrate(mypdf, lower=0, upper=1.6)
1.717
sqrt(2)
swirl()
swirl()
library(swirl)
swirl()
.997*.001
.015*.999
.000997/(.000997+.014985)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
pnorm
qnorm(70,80,10)
pnorm(70,80,10)
function(70,80,10)
qnorm(70,80,10)
qnorm
qnorm(95,1100,75)
pnorm(95,1100,75)
qnorm(95,1100,75)
pnorm(70,mean=80,sd=10)
pnorm(70,80,10)
qnorm(95, mean=1100, sd=75)
pnorm(70,80,10)
qnorm(.95, mean=1100, sd=75)
qnorm(.95, mean=1100, sd=75^2/100)
qnorm(.95, mean=1100, sd=75/10)
pbinom(3,size=5,prob=0.5,lower.tail=false)
pbinom(3,size=5,prob=0.5,lower.tail=FALSE)
pnorm(14,mean=15, sd=10/10)
pnorm(16,mean=15, sd=10/10)
qnorm(0.5,mean=0.5, sd=1/12/33.33)
ppois(10,lambda= 3*5)
swirl()
dice_sqr
ex2_fair <- dice_sqr * dice_fair
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fiar - 3.5^2
ex2_fair - 3.5^2
ex2_fair <- sum(dice_sqr * dice_high) - 3.5^2
ex2_fair <- sum(dice_sqr * dice_high) - edh^2
ex2_fair <- sum(dice_high * dice_sqr) - edh^2
sum(dice_high * dice_sqr) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3) * .8^3 * .2^2
choose(5,3) * .8^3 * .2^2 + choose(5,4) * .8^4 * .2^1  + choose(5,5) * .8^5 * .2^0
pbinom(2, 5,.8, lower.tail = FALSE)
qnorm(10)
qnorm(.10)
0
qnorm(.975,3,2)
1.96*2+ 3
pnorm(1200,1020,50, lower.tail=FALSE)
pnorm(80/50, lower.tail=FALSE)
pnorm((1200-1020)/50, lower.tail=FALSE)
pnorm(180/50, lower.tail=FALSE)
qnorm(.75,1020,50)
.53
.53
ppois(3, 10)
ppois(3, 2.5*4)
pbinom(5,1000,.01)
ppois(5,10)
ppois(5,1000*.01)
coinPlot(n=10)
coinPlot(n=10000)
qnorm(.95,)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*(1-.6)/100)
binom(60,100) x$conf.int
binom(60,100)
binom.test(60,100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <-5/94.32
lamb + c(-1,1)* qnorm(.975)*sqrt(lamb)
lamb + c(-1,1)* qnorm(.975)*sqrt(lamb/94.32)
poisson(5,94.32)x$conf
poisson(5,94.32)$conf
poisson(94.32)$conf
poisson(5,94.32)$conf
poisson(5)$conf
poisson.test(5,94.32)$conf
exit
quit
quit
esc
logout
n=9
n
n <- 9
n
sd=30
m=1100
ci <- m+c(-1,1)*qt(p=.95+(1-.95)/2, df=n-1)*sd/sqrt(n)
ci
ci_high=0
m=-2
n=9
sd<-ci_high -m *sqrt(n)/qt(p=.95+(1-.95)/2,df=n-1)
sd
exit
quit
quit
close
end
install(pandoc)
library(pandoc)
install.packages(pandoc)
install.packages("pandoc")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<- lm(y ~ x)
fit
coeftable <- coef(summary(fit))
coeftable
(pval <- coefTable[2, 4])
(pval <- coeftable[2, 4])
n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e ^ 2) / (n - 2))
ssx <- sum((x - mean(x)) ^ 2)
seBeta1 <- sigma / sqrt(ssx)
tBeta1 <- beta1 / seBeta1
(pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE))
summary(fit)$sigma
(sigma <- sqrt(sum(e ^ 2) / (n - 2)))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
yhat <- fit_car$coef[1] + fit_car$coef[2] * mean(x)
yhat + c(-1, 1) * qt(.975, df = fit_car$df) * summary(fit_car)$sigma / sqrt(length(y))
?mtcars
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
yhat <- fit_car$coef[1] + fit_car$coef[2] * 3
yhat + c(-1, 1) * qt(.975, df = fit_car$df) * summary(fit_car)$sigma * sqrt(1 + (1/length(y)) + ((3 - mean(x)) ^ 2 / sum((x - mean(x)) ^ 2)))
predict(fit_car, newdata = data.frame(x = 2), interval = ("confidence"))
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ I(x/2))
sumCoef2 <- coef(summary(fit_car2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * sumCoef2[2, 2])
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
sum(resid(fit_car)^2) / sum((y - mean(y)) ^ 2)
data(mtcars)
n <- length(mtcars$mpg)
alpha <- 0.05
fit <- lm(mpg ~ am, data = mtcars)
coef(summary(fit))
summary(mtcars)
factor(mtcars$am)
mtcars$am
pe <- coef(summary(fit))["am", "Estimate"]
se <- coef(summary(fit))["am", "Std. Error"]
tstat <- qt(1 - alpha/2, n - 2)  # n - 2 for model with intercept and slope
pe + c(-1, 1) * (se * tstat)
pe
se
bestfit <- lm(mpg ~ wt + qsec + am, data = mtcars)
coef(summary(bestfit))
pe <- coef(summary(bestfit))["am", "Estimate"]
se <- coef(summary(bestfit))["am", "Std. Error"]
tstat <- qt(1 - alpha/2, n - 2)  # n - 2 for model with intercept and slope
pe + c(-1, 1) * (se * tstat)
# nested model testing of the model selected by bestglm
fit1 <- lm(mpg ~ wt, data = mtcars)
fit2 <- update(fit1, mpg ~ wt + qsec)
fit3 <- update(fit2, mpg ~ wt + qsec + am)
anova(fit1, fit2, fit3)
mtcars_vars <- mtcars[, c(1, 6, 7, 9)]
mar.orig <- par()$mar  # save the original values
par(mar = c(1, 1, 1, 1))  # set your new values
pairs(mtcars_vars, panel = panel.smooth, col = 9 + mtcars$wt)
par(mar = mar.orig)  # put the original values back
cor(mtcars_vars)
library(ggplot2)
library(gridExtra)
mpg_dist <- qplot(mtcars_vars$mpg, fill = I("red"))
wt_dist <- qplot(mtcars_vars$wt, fill = I("lightblue"))
qsec_dist <- qplot(mtcars_vars$qsec, fill = I("purple"))
am_dist <- qplot(mtcars_vars$am, fill = I("green"))
grid.arrange(mpg_dist, wt_dist, qsec_dist, am_dist, ncol = 2)
mtcars_vars <- mtcars[, c(1, 6, 7, 9)]
mar.orig <- par()$mar  # save the original values
par(mar = c(2, 2, 2, 2))  # set your new values
boxplot(mtcars_vars[mtcars_vars$am == 1, ]$mpg, mtcars_vars[mtcars_vars$am ==
0, ]$mpg, names = c("Manual", "Automatic"))
par(mar = mar.orig)  # put the original values back
by(mtcars_vars$mpg, mtcars_vars$am, sd)
library(car)
leveneTest(mpg ~ factor(am), data = mtcars_vars)
library(mtcars)
leveneTest(mpg ~ factor(am), data = mtcars_vars)
library(car)
install.package(cars)
install.package("Car")
install.packagee("Car")
install.packages("Car")
install.packages('Car')
install.packages('car')
library(car)
leveneTest(mpg ~ factor(am), data = mtcars_vars)
mar.orig <- par()$mar  # save the original values
par(mar = c(2, 2, 2, 2))  # set your new values
plot(bestfit, which = c(1:1))
par(mar = mar.orig)  # put the original values back
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
download.packages('AppliedPredictiveModeling')
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(caret)
install.packages('caret')
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(caret)
library(ISLR)
download.packages('ISLR')
install.packages("ISLR")
library(ISLR)
install.packages("caret")
library(caret)
library(caret)
sessionInfo()
download.packages("pbkrtest")
install.packages("pbkrtest")
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR()
sessionINfo()
sessionInfo()
library(caret)
install.packages("pbkrtest")
library(caret)
sessionInfo()
sessionInfo()
package_version(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6,
list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
library(rpart)
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit <- train(Class ~ ., method = "rpart", data = training)
sessionInfo()
version(caret)
version.package(caret
)
exit()
quit()
getwd()
setwd("./../git-projects/9MakingDataProjects/assignment/")
dir
dir()
runApp()
library(shiny)
runApp()
runApp("shiny")
runApp("shiny-app")
getwd()
slidify("slidify/index.Rmd")
slidify("index.Rmd")
library(slidify)
slidify("slidify/index.Rmd")
slidify("slidify/index.Rmd")
dt <- fread('data/events.agg.csv')
dt.agg.year <- dt[, list(Count=sum(COUNT), Injuries=sum(INJURIES), Fatalities=sum(FATALITIES)), by=list(YEAR)]
dt
dt.agg.year
getwd()
(sum(dt$FATALITIES)
, big.mark=' ')
dt$FATALITIES
sum(dt$FATALITIES)
format(sum(dt$FATALITIES), big.mark=' ')
slidify("slidify/index.Rmd")
slidify("slidify/index.Rmd")
browseUrl("slidify/index.html")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
getwd()
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
x <-fread('./shiny-app/data/events.agg.csv')
x
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
column(dt)
col(dt)
dt$Year
dt$YEAR
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
library(reshape2)
data <- melt(dt.agg.year[, list(YEAR=YEAR, Injuries=Injuries, Fatalities=Fatalities)], id='YEAR')
populationImpact <- nPlot(
value ~ YEAR, group = 'variable', data = data[order(-YEAR, variable, decreasing = T)],
type = 'stackedAreaChart', dom = 'populationImpact'
)
populationImpact$chart(margin = list(left = 100))
populationImpact$yAxis( axisLabel = "Affected", width = 80)
populationImpact$xAxis( axisLabel = "Year", width = 70)
populationImpact
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
library(knitr)
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
load(knitr)
load('knitr')
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
slidify("slidify/index.Rmd")
browseURL("slidify/index.html")
